//mots-clés

    - Notion de base Javascript
    - nature "orientée évènements"
    - Node.js n'est pas un framework. Node.js est un environnement très bas niveau

// Node.js à quoi ça sert ?

  - Pourquoi Node.js semble-t-il aussi apprécié des développeurs web ?
  - Pourquoi avoir utilisé un langage comme JavaScript ?
  - D'où vient cette rapidité supposée de Node.js ? A quoi ça peut servir ?
  - Est-ce que ce truc est mature ? Qui l'utilise ? Devrais-je l'utiliser moi aussi ?


    // Du javascript  "à la papa" à Node.js

        - Concretemement node.js permet d'utiliser le language Javascript sur le serveur


    // Node.js le javascript côté serveur

         - Node.js offre un environnement côté serveur qui nous permet aussi d'utiliser le langage JavaScript pour générer des pages web.
         - En gros, il vient en remplacement de langages serveur comme PHP, Java EE, etc.


    // Pourquoi Node.js est-il rapide ?

        - Le moteur V8 : compilation JIT (Just In Time)
        - Le modèle non bloquant : Node.js a pu mettre en place une architecture de code entièrement non bloquante.

        - exemple :
            request('http://www.site.com/fichier.zip', function (error, response, body) {
                console.log("Fichier téléchargé !");
            });
            console.log("Je fais d'autres choses en attendant...");

        - En JavaScript on peut tout à fait envoyer une fonction en paramètre d'une autre fonction.
        - Cela signifie ici : "Exécute cette fonction quand le téléchargement est terminé".


// Installation


// Premiere application avec Node.js
    Ce sera l'occasion d'expérimenter les fameux callbacks qui s'exécutent dès lors qu'un évènement survient

    // Serveur et threads

        Node.js est bas niveau et monothread, mais il est "orienté évenements" (souplesse)
        --> dès qu'il y a une action un peu longue, le programme redoone la main à node.js pour effectuer d'autres actions
            en attendant qu'un evenement survienne pour dire que l'opération est terminée.


    // Construire son serveur HTTP

        var http = require('http');

        var server = http.createServer(function(req, res) {
          res.writeHead(200);
          res.end('Salut tout le monde !');
        });
        server.listen(8080);


        1. On appel la bibliothèque "http"
        2. On appel la fonction createServer() de l'objet http dans server
        3. On appel la fonction callback à executer quand un visiteur se connecte à norre site
            - req (requête) : contient toutes les informations sur ce que le visiteur a demandé
            - res (reponse) : l'objet de retour au visiteur, contient en général le HTML
            - on renvoie le code 200 dans l'en-tête de la réponse HTTP --> Tout va bien" != 404
            - on termine la réponse et on renvoie du texte brut avec end()
        4. On lance le serveur en écoute sur le port 8080


    // Retourner du HTML

        - les types de données qu'on envoie au client :

            - texte brut : text/plain
            - HTML          : text/html
            - CSS           : text/css
            - JPEG          : image/jpeg
            - MPEG4         : video/mp4
            - ZIP           : application/zop
            ...

        - on spécifie le type MIME de la réponse (envoyé dans l'entête) -> on rajoute :
            res.writeHead(200, {"Content-Type": "text/html"});
            res.end('<p>Voici un paragraphe <strong>HTML</strong> !</p>');


    // Determiner la page appelée et les paramètres

        - Pour l'instant, vu qu'on ne fait aucun test, notre application renvoie toujours la même chose.
        - Comment récuperer le nom de la page et les paramètres qui y circulent ?

         - Le module "url"      : var url = require("url");
         - on parse la requête  : url.parse(req.url).pathname;

        Comment récuperer les paramètres ?
            à partir de l'url :
             - On parse l'url
             - On inclue le module "querystring" : var querystring = require('querystring');
             - On range les valeurs dans un tableau : var params = querystring.parse(url.parse(req.url).query);


    // Les évènements

        Node.js est un environement de developpement JavaScript basé sur les évènements
        -> il y a un seul thread mais aucune opération n'est bloquante
        -> les opérations un peu longues sont lancées en tâche de fond
        -> un fonctions de callback est appelée quand l'opération est terminée


        // Ecouter les évènements

            - Les évènements émient par les objets node.js héritent tous d'un objet EventEmitter

            - exemple avec Jquery :
               $("canvas").on("mouseleave", function() { ... });
                -> On dit qu'on attache l'evenement au DOM de la page

            - exemple avec Node.js :
               server.on('close',function(){...})
                -> On écoute l'evenement "close" de l'objet server

            - En faite ce code :
                var server = http.createServer(function(req, res) { });
            - peut aussi s'écrire :
                var server = http.createServer();
                server.on('request', function(req, res) { });

            - On peut écouter plusieur évènements à la fois et faire 2 appel de on() pour le même évènement


        // Emettre des évènements

            - Le module events basé sur EventEmitter :
                var EventEmitter = require ('events').EvenEmitter;

            - Puis pour emetre on fait appel à emit() depuis l'objet basé sur EventEmitter
                - On indique le nom de l'evenement
                - les eventuels paramètres

            - exemple :
                jeu.emit('gameover', 'Vous avez perdu !'); // Emission
                jeu.on('gameover', function(message) { }); // Ecoute















